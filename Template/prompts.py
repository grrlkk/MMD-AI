from langchain.prompts import PromptTemplate


# **(임시)**질문 생성을 위한 프롬프트 템플릿
##########################################################
question_generation_prompt = PromptTemplate(
    input_variables=["question"],
    template="""사용자 질문: {question}

위 질문을 더 구체적으로 작성하세요."""
)
##########################################################

# 직무 검증을 위한 프롬프트 템플릿
job_recommendation_prompt = PromptTemplate(
    input_variables=[
        "user_profile",
        "회사 1", "직무 1", "위치 1", "자격 요건 1", "우대 사항 1", "원본 1", "코사인유사도 1",
        "회사 2", "직무 2", "위치 2", "자격 요건 2", "우대 사항 2", "원본 2", "코사인유사도 2",
        "회사 3", "직무 3", "위치 3", "자격 요건 3", "우대 사항 3", "원본 3", "코사인유사도 3",
        "회사 4", "직무 4", "위치 4", "자격 요건 4", "우대 사항 4", "원본 4", "코사인유사도 4",
        "회사 5", "직무 5", "위치 5", "자격 요건 5", "우대 사항 5", "원본 5", "코사인유사도 5"
    ],
    template="""
사용자 프로필:
{user_profile}

아래는 추천 후보 직무 목록입니다. 각 직무의 '회사', '직무', '위치', '자격 요건', '우대 사항', '유사도 점수' 정보를 참고하세요.

각 직무별로 아래 3가지 항목에 대해 사용자 프로필과 일치하는지 0 또는 1로 판단하세요.

1.  **희망 직무 매칭**: 사용자 프로필의 '희망 직무'와 채용 공고의 '{직무 1}'가 의미상 일치하는가?
2.  **기술 스택 매칭**: 사용자 프로필의 '기술 스택'이 채용 공고의 '{자격 요건 1}' 또는 '{우대 사항 1}' 내용과 일치하는가?
3.  **희망 근무지 매칭**: 사용자 프로필의 '희망 근무지'와 채용 공고의 '{위치 1}'가 일치하는가?
    (규칙: '서울'과 '서울시'처럼 시(City) 단위로 일치하거나, 수도권(서울, 경기, 인천) / 비수도권 단위로 일치하는 경우도 매칭(1)으로 인정한다.)

위의 매칭 점수(0/1) 합계(최대 3점)와 코사인 유사도 점수를 다음 공식에 따라 가중 평균하여 최종 점수를 계산하세요.
**최종 점수 = (매칭 점수 합계 / 3 * 0.5 + 코사인 유사도 점수 * 0.5)**

---
[분석 과정]
각 직무별로 아래와 같이 표로 정리하여 분석 과정을 보여주세요.

1) 회사: {회사 1}
   - 매칭 점수: (희망 직무: 0/1, 기술 스택: 0/1, 희망 근무지: 0/1)
   - 매칭 점수 합계: (예: 2)
   - 코사인 유사도 점수: {코사인유사도 1}
   - 최종 점수: (계산 결과)

2) 회사: {회사 2}
   - 매칭 점수: (희망 직무: 0/1, 기술 스택: 0/1, 희망 근무지: 0/1)
   - 매칭 점수 합계: (예: 3)
   - 코사인 유사도 점수: {코사인유사도 2}
   - 최종 점수: (계산 결과)

3) 회사: {회사 3}
   - 매칭 점수: (희망 직무: 0/1, 기술 스택: 0/1, 희망 근무지: 0/1)
   - 매칭 점수 합계: (예: 3)
   - 코사인 유사도 점수: {코사인유사도 3}
   - 최종 점수: (계산 결과)

4) 회사: {회사 4}
   - 매칭 점수: (희망 직무: 0/1, 기술 스택: 0/1, 희망 근무지: 0/1)
   - 매칭 점수 합계: (예: 3)
   - 코사인 유사도 점수: {코사인유사도 4}
   - 최종 점수: (계산 결과)

5) 회사: {회사 5}
   - 매칭 점수: (희망 직무: 0/1, 기술 스택: 0/1, 희망 근무지: 0/1)
   - 매칭 점수 합계: (예: 3)
   - 코사인 유사도 점수: {코사인유사도 5}
   - 최종 점수: (계산 결과)
---

[최종 답변]
최종적으로 아래와 같은 JSON 형식으로만 답변하세요.

{{
  "selected_job_index": "가장 점수가 높은 직무의 번호 (1에서 5 사이의 숫자)",
  "selected_job_reason": "각 항목별 매칭 근거와 점수 계산 과정, 그리고 최종적으로 해당 직무를 선정한 이유를 구체적으로 작성하세요."
}}
"""
)
##########################################################

preparation_advice_prompt = PromptTemplate(
    input_variables=["user_profile", "job_data"],
    template="""사용자 프로필: {user_profile}

직무 정보 (직무, 회사, 주요 업무, 자격 요건, 기술 스택, 혜택 및 복지, 희망 근무지, 채용 과정 등 포함):
{job_data}

위 정보를 바탕으로 직무 준비 조언을 제공하세요."""
)

summary_memory_prompt = PromptTemplate(
    input_variables=["selected_job", "search_result", "preparation_advice", "chat_history"],
    template="추천 회사: {selected_job}\검색 정보: {search_result}\n조언: {preparation_advice}\n대화: {chat_history}\n요약하세요."
)

# 최종 답변 생성을 위한 프롬프트 템플릿
final_answer_prompt = PromptTemplate(
    input_variables=["selected_job","search_result", "preparation_advice"],
    template="""당신은 사용자의 직무 상담을 도와주는 AI 어시스턴트입니다.
다음 정보를 바탕으로 사용자에게 최종 답변을 제공해주세요:

1. 회사 정보
2. 인터넷 검색 추가 정보
3. 준비 조언

위 정보들을 자연스럽게 통합하여, 사용자가 이해하기 쉽고 실질적인 도움이 되는 답변을 작성해주세요.
답변은 친절하고 전문적이어야 하며, 사용자의 상황에 맞는 구체적인 조언을 포함해야 합니다.

주의사항:
- 제공된 정보만을 사용하여 답변하세요.
- 정보가 부족하거나 불확실한 경우, 해당 부분에 대해 "해당 정보를 제공할 수 없습니다"라고 명시적으로 언급하세요.
- 정보가 전혀 없는 경우, "죄송합니다. 현재 제공된 정보로는 적절한 답변을 드리기 어렵습니다"라고 답변하세요.
- 절대로 제공되지 않은 정보를 임의로 추측하거나 만들어내지 마세요.

추천 회사: {selected_job}
검색 결과: {search_result}
조언: {preparation_advice}"""
)

# 직무 검증을 위한 프롬프트 템플릿
##########################################################
job_verification_prompt = PromptTemplate(
    input_variables=["user_profile", "question", "job_document"],
    template="""
사용자 프로필: {user_profile}
질문: {question}
직무 문서 (직무, 회사, 직무 카테고리, 태그, 위치, 마감일, 포지션 상세, 주요 업무, 자격 요건, 우대 사항, 기술 스택, 혜택 및 복지, 채용 과정, 채용공고 URL 포함):
{job_document}

위 문서가 사용자의 질문과 프로필에 적합한지 평가하세요. 적합하면 반드시 소문자 true, 적합하지 않으면 반드시 소문자 false만을 출력하세요. (예: true 또는 false)
다른 부가 설명, JSON, 문장 등은 절대 출력하지 마세요.
"""
)

##########################################################

react_prompt = PromptTemplate(
    input_variables=["input", "agent_scratchpad", "tools", "tool_names"],
    template="""사용자 입력: {input}

다음 도구를 사용해 단계를 순차적으로 수행하세요:
1. parse_input_tool: 입력을 파싱.
2. recommend_jobs_tool: 직무 추천.
3. verify_job_relevance_tool: 추천 직무 적합성 검증 (retry_count < 2이고 revised_query 있으면 recommend_jobs_tool 재호출).
4. get_company_info_tool: 회사 정보 조회.
5. get_salary_info_tool: 급여 정보 조회.
6. get_preparation_advice_tool: 준비 조언 제공.
7. summarize_results_tool: 결과 요약.

사용 가능한 도구: {tool_names}
도구 세부 정보:
{tools}

각 단계에서 다음 형식으로 응답:
Thought: [생각]
Action: [도구 이름]
Action Input: [state]

대화 기록과 중간 결과를 참고하세요. retry_count가 2에 도달하면 재검색 없이 다음 단계로 진행.

{agent_scratchpad}
"""
)